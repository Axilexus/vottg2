from pyrogram import Client, filters
from pyrogram.types import Message
import sqlite3
from config import api_id, api_hash
# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥—É–ª—è filters
functions = [attr for attr in dir(filters) if callable(getattr(filters, attr))]

# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
for function in functions:
    print(function)

app = Client('my_bot2', api_id=api_id, api_hash=api_hash)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@app.on_message(filters.command("r"))
def show_schedule(_, message: Message):
    conn = sqlite3.connect('schedule33.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute('''CREATE TABLE IF NOT EXISTS schedule  (day text, subjects text)''')
    conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM schedule")
    rows = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    schedule_message = "üñ•Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¢–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]

    for day in days:
        schedule_message += f"{day}: "
        subjects = [row[1] for row in rows if row[0] == day]
        if subjects:
            schedule_message += ", ".join(subjects)
        else:
            schedule_message += "–ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."
        schedule_message += "\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    message.reply_text(schedule_message)
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@app.on_message(filters.command("add"))
def add_subjects(_, message: Message):
    conn = sqlite3.connect('schedule33.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    cursor.execute('''CREATE TABLE IF NOT EXISTS schedule (day text, subjects text)''')
    conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command, day, *subjects = message.text.split()
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("DELETE FROM schedule WHERE day=?", (day,))
    conn.commit()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for subject in subjects:
        cursor.execute("INSERT INTO schedule VALUES (?, ?)", (day, subject))
    conn.commit()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    message.reply_text("–ü—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
    conn.close()

@app.on_message(filters.pinned_message)
def handle_pinned_message(client, message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫—Ä–µ–ø–∏–ª–∏ –∏ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pinned_by_user_id = message.from_user.id
    author_user_id = message.pinned_message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    pinned_by_user_name = message.from_user.first_name
    author_user_name = message.pinned_message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if message.pinned_message.text:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text = f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author_user_name}:\n\n{message.pinned_message.text}\n\n–ó–∞–∫—Ä–µ–ø–∏–ª: {pinned_by_user_name}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        client.send_message(
            chat_id=message.chat.id,
            text=text
        )
# –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞
is_running = False



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@app.on_message(filters.command("h"))
def show_homework(_, message: Message):
    conn = sqlite3.connect('homework.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute('''CREATE TABLE IF NOT EXISTS schedule  (day text, subjects text)''')
    conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM schedule")
    rows = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    schedule_message = "üñ•Ô∏è –î–ó –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:\n\n"
    days = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–û–ë–ñ", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ù–µ–º–µ—Ü–∫–∏–π", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–ü", "–ù–∞—á.–ü—Ä–æ–µ–∫—Ç.–≠–ü–∏–£"]

    for day in days:
        schedule_message += f"{day}: "
        subjects = [row[1] for row in rows if row[0] == day]
        if subjects:
            schedule_message += ", ".join(subjects)
        else:
            schedule_message += "–ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."
        schedule_message += "\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    message.reply_text(schedule_message)
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@app.on_message(filters.command("addh"))
def add_homework(_, message: Message):
    conn = sqlite3.connect('homework.db')
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    cursor.execute('''CREATE TABLE IF NOT EXISTS schedule (day text, subjects text)''')
    conn.commit()
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command, day, *subjects = message.text.split()
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("DELETE FROM schedule WHERE day=?", (day,))
    conn.commit()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for subject in subjects:
        cursor.execute("INSERT INTO schedule VALUES (?, ?)", (day, subject))
    conn.commit()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    message.reply_text("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫")
    conn.close()



# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /s
@app.on_message(filters.command("s"))
def start_loop(client, message):
    global is_running
    if not is_running:
        is_running = True
        message.reply_text("–¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω.")
        run_loop(client, message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /t
@app.on_message(filters.command("t"))
def stop_loop(client, message):
    global is_running
    if is_running:
        is_running = False
        message.reply_text("–¶–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –≤ —Ü–∏–∫–ª–µ
def run_loop(client, chat_id):
    global is_running
    while is_running:
        # –î–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –≤ —Ü–∏–∫–ª–µ
        client.send_message(chat_id, "–°–∞—Å–∏")
@app.on_message(filters.command("addv", prefixes="/"))
def add_voice_message(client, message):
    conn = sqlite3.connect("voice_messages1.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS voice_messages1 (
        name TEXT PRIMARY KEY,
        file_id TEXT,
        user_id INTEGER,
        first_name TEXT,
        last_name TEXT
    )
""")
    if message.reply_to_message and message.reply_to_message.voice:
        name = message.text.split(maxsplit=1)[1]
        file_id = message.reply_to_message.voice.file_id
        user_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        last_name = message.reply_to_message.from_user.last_name

        cursor.execute("""
            INSERT OR REPLACE INTO voice_messages1 (name, file_id, user_id, first_name, last_name)
            VALUES (?, ?, ?, ?, ?)
        """, (name, file_id, user_id, first_name, last_name))
        conn.commit()
        m=client.send_message(message.chat.id, "Voice message added successfully!")
    else:
        m=client.send_message(message.chat.id, "Reply to a voice message to add it with a name.")
    message.delete()
    m.delete()
@app.on_message(filters.command("v", prefixes="/"))
def send_voice_message_names(client, message):
    conn = sqlite3.connect("voice_messages1.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS voice_messages1 (
        name TEXT PRIMARY KEY,
        file_id TEXT,
        user_id INTEGER,
        first_name TEXT,
        last_name TEXT
    )
""")
    cursor.execute("SELECT name FROM voice_messages1")
    rows = cursor.fetchall()
    names = "\n".join([row[0] for row in rows])
    client.send_message(message.chat.id, f"Voice message names:\n{names}")
    message.delete()

@app.on_message(filters.command("d", prefixes="/"))
def send_voice_message(client, message):
    conn = sqlite3.connect("voice_messages1.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS voice_messages1 (
        name TEXT PRIMARY KEY,
        file_id TEXT,
        user_id INTEGER,
        first_name TEXT,
        last_name TEXT
    )
""")
    command, name = message.text.split(maxsplit=1)
    cursor.execute("SELECT file_id FROM voice_messages1 WHERE name = ?", (name,))
    row = cursor.fetchone()
    if row:
        file_id = row[0]
        client.send_voice(message.chat.id, file_id)
    else:
        m = client.send_message(message.chat.id, "Invalid voice message name")
    message.delete()
    m.delete()
        
@app.on_message(filters.command("rmv", prefixes="/"))
def remove_voice_message(client, message):
    conn = sqlite3.connect("voice_messages1.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS voice_messages1 (
        name TEXT PRIMARY KEY,
        file_id TEXT,
        user_id INTEGER,
        first_name TEXT,
        last_name TEXT
    )
""")
    command, name = message.text.split(maxsplit=1)
    cursor.execute("DELETE FROM voice_messages1 WHERE name = ?", (name,))
    conn.commit()
    m = client.send_message(message.chat.id, "Voice message removed successfully!")
    message.delete()
    m.delete()
@ app.on_message(filters.command("zv", prefixes="/"))
def send_photo(client, message):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
    photo_path = "zvonok.jpg"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    client.send_photo(
        chat_id=message.chat.id,
        photo=photo_path,
        caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
    )
@app.on_message(filters.command(["save_photo"], prefixes="/"))
def save_photo(client, message):
    if message.reply_to_message and message.reply_to_message.photo:
        photo = message.reply_to_message.photo.file_id
        file_path = client.download_media(photo)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        message.reply_text(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
    else:
        message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ.")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
app.run()
